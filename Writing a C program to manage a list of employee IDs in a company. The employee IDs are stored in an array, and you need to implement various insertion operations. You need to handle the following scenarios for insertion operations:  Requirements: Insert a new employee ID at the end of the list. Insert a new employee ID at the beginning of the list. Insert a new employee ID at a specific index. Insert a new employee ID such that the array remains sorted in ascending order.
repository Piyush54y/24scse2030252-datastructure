Name Piyush Kumar
roll 24scse2030252
course mca
subject data structures






#include <stdio.h>

#define MAX_EMPLOYEES 100

// Function to display employee IDs
void display(int arr[], int size) {
    printf("Employee IDs: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to insert at the end
int insertAtEnd(int arr[], int size, int id) {
    if (size >= MAX_EMPLOYEES) {
        printf("Error: Employee list is full.\n");
        return size;
    }
    arr[size] = id;
    return size + 1;
}

// Function to insert at the beginning
int insertAtBeginning(int arr[], int size, int id) {
    if (size >= MAX_EMPLOYEES) {
        printf("Error: Employee list is full.\n");
        return size;
    }
    for (int i = size; i > 0; i--) {
        arr[i] = arr[i - 1];
    }
    arr[0] = id;
    return size + 1;
}

// Function to insert at a specific index
int insertAtIndex(int arr[], int size, int id, int index) {
    if (size >= MAX_EMPLOYEES || index < 0 || index > size) {
        printf("Error: Invalid index or list is full.\n");
        return size;
    }
    for (int i = size; i > index; i--) {
        arr[i] = arr[i - 1];
    }
    arr[index] = id;
    return size + 1;
}

// Function to insert while maintaining sorted order
int insertSorted(int arr[], int size, int id) {
    if (size >= MAX_EMPLOYEES) {
        printf("Error: Employee list is full.\n");
        return size;
    }
    int i;
    for (i = size - 1; (i >= 0 && arr[i] > id); i--) {
        arr[i + 1] = arr[i];
    }
    arr[i + 1] = id;
    return size + 1;
}

// Main function
int main() {
    int employees[MAX_EMPLOYEES] = {101, 105, 110, 120};
    int size = 4;  // Initial number of employees

    printf("Initial ");
    display(employees, size);

    // Insert at the end
    size = insertAtEnd(employees, size, 130);
    printf("After inserting at end: ");
    display(employees, size);

    // Insert at the beginning
    size = insertAtBeginning(employees, size, 100);
    printf("After inserting at beginning: ");
    display(employees, size);

    // Insert at index 2
    size = insertAtIndex(employees, size, 108, 2);
    printf("After inserting at index 2: ");
    display(employees, size);

    // Insert in sorted order
    size = insertSorted(employees, size, 115);
    printf("After inserting in sorted order: ");
    display(employees, size);

    return 0;
}
